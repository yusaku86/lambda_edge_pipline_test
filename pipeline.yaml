AWSTemplateFormatVersion: "2010-09-09"
Description: "S3 bucket for function and redirect configuration, Pipeline"

Parameters:
  LogBucketName:
    Type: String

  CloudFrontId:
    Type: String

  LambdaName:
    Type: String

  # gitHubとの接続のArn
  GitHubConnectionArn:
    Type: String

  # gitHubリポジトリのフルネーム
  gitRepositoryFullName:
    Type: String
    Description: "The full name of the repository e.g. username/repository"

  Environment:
    Type: String
    AllowedValues:
      - prod
      - stg
      - dev

# マッピング
Mappings:
  # 連携するgitブランチ名
  gitBranchMap:
    environment:
      prod: main
      stg: stage
      dev: develop

Resources:
################################################################
# Code Pipeline関連
################################################################
  # Lambda@edgeをビルドしてCloudFrontに紐付けるパイプライン
  LambdaEdgePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub "LambdaEdgePipeline-${Environment}"
      PipelineType: V2
      ArtifactStore:
        Type: S3
        Location: !Sub "redirect-config-${Environment}-${AWS::AccountId}"
      RoleArn: !GetAtt CodePipelineRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: "1"
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                ConnectionArn: !Ref GitHubConnectionArn
                FullRepositoryId: !Ref gitRepositoryFullName
                BranchName: !FindInMap [gitBranchMap, environment, !Ref Environment]
                DetectChanges: true
        - Name: Build
          Actions:
            - Name: BuildAction
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: "1"
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput
              Configuration:
                ProjectName: !Ref LambdaEdgeBuildProject
      Tags:
        - Key: Env
          Value: !Ref Environment

  # パイプラインのRole
  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "CodePipeLine-LambdaEdge-${Environment}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: [codepipeline.amazonaws.com]
            Action: ["sts:AssumeRole"]
      Policies:
        - PolicyName: CodePipelineLambdaEdgePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "codepipeline:PutJobSuccessResult"
                  - "codepipeline:PutJobFailureResult"
                  - "codepipeline:PutJobInProgress"
                  - "codepipeline:GetPipeline"
                  - "codepipeline:GetPipelineExecution"
                  - "codepipeline:GetPipelineState"
                  - "codepipeline:PollForJobs"
                  - "codepipeline:AcknowledgeJob"
                  - "codebuild:StartBuild"
                  - "codebuild:BatchGetBuilds"
                  - "codebuild:StopBuild"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "ec2:CreateNetworkInterface"
                  - "ec2:DescribeNetworkInterfaces"
                  - "ec2:DeleteNetworkInterface"
                  - "ec2:AssignPrivateIpAddresses"
                  - "ec2:UnassignPrivateIpAddresses"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:GetBucketVersioning"
                  - "s3:PutObject"
                Resource: !Sub "arn:aws:s3:::redirect-config-${Environment}-${AWS::AccountId}/*"
              - Effect: Allow
                Action:
                  - "cloudwatch:*"
                  - "elasticloadbalancing:Describe*"
                  - "autoscaling:Describe*"
                  - "codestar-connections:UseConnection"
                Resource: "*"

################################################################
# Code Build関連
################################################################
  # ビルドプロジェクト
  LambdaEdgeBuildProject:
    Type: "AWS::CodeBuild::Project"
    Properties:
      Source:
        Type: "CODEPIPELINE"
        BuildSpec: "function/buildspec.yaml"
      Artifacts:
        Name: "LambdaEdge"
        Type: "CODEPIPELINE"
      Environment:
        ComputeType: "BUILD_GENERAL1_SMALL"
        Image: "aws/codebuild/amazonlinux2-x86_64-standard:5.0"
        ImagePullCredentialsType: "CODEBUILD"
        Type: "LINUX_CONTAINER"
        EnvironmentVariables:
          - Name: "CLOUD_FRONT_ID"
            Value: !Ref CloudFrontId
          - Name: "FUNCTION_NAME"
            Value: !Ref LambdaName
          - Name: "REDIRECT_CONFIG_BUCKET"
            Value: !Sub "redirect-config-${Environment}-${AWS::AccountId}"
          - Name: "REDIRECT_CONFIG_FILE"
            Value: "redirect-config.json"
          - Name: "REGEX_REDIRECT_CONFIG_FILE"
            Value: "regex-redirect-config.json"
      ServiceRole: !GetAtt LambdaEdgeCodeBuildRole.Arn
      LogsConfig:
        CloudWatchLogs:
          Status: "ENABLED"
          GroupName: !Sub "codebuild/redirect-lambda-edge"

  # Code Buildのロール
  LambdaEdgeCodeBuildRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "CodeBuild-LambdaEdge-${Environment}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: CodeBuildAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "s3:*"
                  - "lambda:UpdateFunctionCode"
                  - "lambda:GetFunction"
                  - "lambda:EnableReplication*"
                  - "cloudfront:UpdateDistribution"
                  - "cloudfront:GetDistributionConfig"
                Resource: "*"

###############################################################
# その他
###############################################################
  # リダイレクトの設定ファイルを保存するS3バケット
  RedirectConfigBucket:
    Type: "AWS::S3::Bucket"
    DependsOn: RunPipeLineLambdaPermission
    Properties:
      BucketName: !Sub "redirect-config-${Environment}-${AWS::AccountId}"
      LoggingConfiguration:
        DestinationBucketName: !Ref LogBucketName
        LogFilePrefix: !Sub "S3AccessLogs/redirect-config-${Environment}-${AWS::AccountId}/"
      # リダイレクトの設定ファイルがアップロードされたらパイプラインを起動するLambdaを実行
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: "s3:ObjectCreated:*"
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: regex-redirect-config.json
            Function:
              !GetAtt RunPipeLineLambda.Arn
      Tags:
        - Key: Env
          Value: !Ref Environment

  # パイプライン起動するLambda
  RunPipeLineLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub RunPipeline-${Environment}
      Handler: index.handler
      Runtime: nodejs20.x
      Role: !GetAtt RunPipeLineLambdaRole.Arn
      Environment:
        Variables:
          PIPELINE_NAME: !Ref LambdaEdgePipeline
      Code:
        ZipFile: |
          'use strict';
          const { CodePipelineClient, StartPipelineExecutionCommand } = require("@aws-sdk/client-codepipeline");
          const client = new CodePipelineClient({ region: "ap-northeast-1" });

          exports.handler = async (event) => {
            try {
              const command = new StartPipelineExecutionCommand({ name: process.env.PIPELINE_NAME });
              // パイプライン実行
              const response = await client.send(command);
              console.log(`Pipeline execution started: ${response.pipelineExecutionId}`);
            } catch (error) {
              console.error(`Error starting pipeline: ${error}`);
              throw error;
            }
          };

  # パイプラインを起動するLambdaのロール
  RunPipeLineLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "RunPipeLineLambda-${Environment}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ["lambda.amazonaws.com"]
            Action: ["sts:AssumeRole"]
      Policies:
        - PolicyName: RunPipeLineLambdaPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "codepipeline:StartPipelineExecution"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                Resource: !Sub "arn:aws:s3:::redirect-config-${Environment}-${AWS::AccountId}/*"

  # パイプラインを起動するLambdaのリソースベースのポリシー
  RunPipeLineLambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn: RunPipeLineLambda
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Sub RunPipeline-${Environment}
      Principal: "s3.amazonaws.com"
      SourceAccount: !Ref "AWS::AccountId"
      SourceArn: !Sub "arn:aws:s3:::redirect-config-${Environment}-${AWS::AccountId}"
